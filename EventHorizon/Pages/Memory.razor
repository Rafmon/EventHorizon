@page "/memory"
@using System.Threading;
@using EventHorizon.src.Util;
@inject MemoryController MemoryController
@inherits BaseComponent;
@using EventHorizon.src.Ui;

<h3>@I18n.Translate("MemoryTitle")</h3>

<ul>
    @foreach (var memoryAddressEntry in MemoryController.GetMemoryAddresses())
    {
        <li>

            <!-- checkbox for active/inactive -->
            <label class="switch">
                <input type="checkbox" @bind="memoryAddressEntry.Value.IsActive" @onclick="() => memoryAddressEntry.Value.Update(memoryAddressEntry.Value.IsActive)">
                <span class="slider round"></span>
            </label>

            <!-- switchable view for editing: label or inputtext -->
            @if (memoryAddressEntry.Value.IsEditing)
            {
                <InputText @bind-Value="memoryAddressEntry.Value.Name" @onblur="() => SaveName(memoryAddressEntry.Value)" />
            }
            else
            {
                <span @onclick="() => EditName(memoryAddressEntry.Value)">@memoryAddressEntry.Value.Name</span>
            }



            &nbsp;&nbsp;&nbsp;@memoryAddressEntry.Value.Address listId: @memoryAddressEntry.Key
        </li>

    }
</ul>


@functions {
    PeriodicTimer? periodicTimer;
    String MemoryAddressOldName = String.Empty;
    protected override async Task OnInitializedAsync()
    {
        periodicTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(1000));
        await RunTimeLineAsync();
    }

    public async Task RunTimeLineAsync()
    {
        while (periodicTimer != null && await periodicTimer.WaitForNextTickAsync())
        {
            StateHasChanged();
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        periodicTimer = null;
    }

    private void EditName(MemoryAddress memoryAddress)
    {
        memoryAddress.IsEditing = true;
        MemoryAddressOldName = memoryAddress.Name;
    }

    private void SaveName(MemoryAddress memoryAddress)
    {
        memoryAddress.IsEditing = false;
        if (!string.IsNullOrEmpty(memoryAddress.Name) && !MemoryAddressOldName.Equals(memoryAddress.Name))
        {
            MemoryController.SaveMemoryAddress(memoryAddress.Address);
        }
        else
        {
            memoryAddress.Name = MemoryAddressOldName;
        }
        MemoryAddressOldName = string.Empty;
    }
}
